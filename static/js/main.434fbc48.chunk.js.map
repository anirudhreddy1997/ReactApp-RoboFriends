{"version":3,"sources":["serviceWorker.js","components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/app.js","components/actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","_this3","filteredRobots","filter","robot","toLowerCase","includes","length","searchbox","onSearchChange","components_scroll","cardlist","Component","connect","dispatch","event","payload","target","value","intialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.434fbc48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{\r\n\treturn (\r\n\t\t<div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shawdow-5'>\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?set=set2&size=200x200`}  />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList=({robots})=>{\r\n\r\nreturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user)=>{\r\n\t\t\t\t\treturn (<Card key={user.id} id={user.id} name ={user.name} email={user.email}/>);\r\n\t\t\t\t})\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox =({searchField, searchChange})=>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tclassName='pa3 b3 b--green bg-lightest-blue'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll' , border:'1px solid Black',height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Scroll;","import React ,{Component} from 'react';\r\nimport CardList from '../components/cardlist';\r\n/*import { robots } from './robots';\r\n*/import SearchBox from '../components/searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/scroll';\r\nimport { setSearchField } from '../components/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state =>{\r\n\t\r\n\treturn {\r\n\t\tsearchField:state.searchField\r\n\t}\r\n}\r\nconst mapDispatchToProps =(dispatch) =>{\r\n\t\r\n\treturn {\r\n\t\tonSearchChange: (event)=>{\r\n\t\t\t\r\n\t\t\tdispatch(setSearchField(event.target.value))\r\n\t\t}\r\n\t\t}\r\n}\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tcomponentDidMount(){\r\n\t\t\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots:users}));\r\n\t\t\r\n\t\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robot=>{\r\n\t\t\t\treturn robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tif(!this.state.robots.length){\r\n\t\t\treturn (<h1 className='tc'>Loading</h1>);\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.props.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n\t\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from '../constants';\r\n\r\nexport const setSearchField=(text)=>{\r\n\t\r\n\r\nreturn {\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n}\r\n};","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\nconst intialState ={\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots=(state=intialState,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:{\r\n\r\n\t\t\treturn Object.assign({},state,{searchField:action.payload})\r\n\t\t}\r\n\t\t\t\r\n\t\tdefault :{\r\n\t\t\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\t\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/app';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchRobots } from './reducers';\n\n\nconst store=createStore(searchRobots);\nReactDOM.render(\n\t<div>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</div>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}